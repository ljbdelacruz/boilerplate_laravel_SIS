name: Deploy to AWS EC2

on:
  push:
    branches: [ deployment ]
  workflow_dispatch:


jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create .env file from template
        run: |
          cp .env.example .env
          echo "DB_HOST=db" >> .env
          echo "DB_PORT=3306" >> .env
          echo "DB_USERNAME=${{ vars.DB_USERNAME }}" >> .env
          echo "DB_PASSWORD=${{ vars.DB_PASSWORD }}" >> .env
          echo "MYSQL_ROOT_PASSWORD=${{ vars.MYSQL_ROOT_PASSWORD }}" >> .env
          echo "APP_KEY=${{ vars.APP_KEY }}" >> .env
          echo "APP_URL=${{ vars.APP_URL }}" >> .env

      - name: inject secrets into .env
        run: |
          sed -i 's/\r$//' .env
          export DB_HOST=db
          export DB_PORT=3306
          export DB_USERNAME=${{ vars.DB_USERNAME }}
          export DB_PASSWORD=${{ vars.DB_PASSWORD }}
          export APP_KEY=${{ vars.APP_KEY }}
          export APP_URL=${{ vars.APP_URL }}
          envsubst < .env > .env.tmp && mv .env.tmp .env

      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ vars.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Fix permissions on EC2 before rsync
        run: |
          ssh -i ~/.ssh/id_rsa ${{ vars.EC2_USER }}@${{ vars.EC2_HOST }} \
            "cd /home/${{ vars.EC2_USER }} && \
            sudo mkdir -p app/storage app/bootstrap/cache && \
            sudo chown -R ubuntu:ubuntu app/storage app/bootstrap app/bootstrap/cache && \
            sudo chmod -R 775 app/storage app/bootstrap app/bootstrap/cache"

      - name: Copy files to EC2
        run: |
          rsync -avz --exclude=".git" --exclude="vendor" -e "ssh -i ~/.ssh/id_rsa" ./ ${{ vars.EC2_USER }}@${{ vars.EC2_HOST }}:/home/${{ vars.EC2_USER }}/app

      - name: Deploy on EC2
        run: |
          ssh -i ~/.ssh/id_rsa ${{ vars.EC2_USER }}@${{ vars.EC2_HOST }} << 'EOF'
            cd /home/${{ vars.EC2_USER }}/app
            # Fix permissions on the host
            sudo chown -R 1000:1000 storage bootstrap/cache
            sudo chmod -R 775 storage bootstrap/cache
            # Install Docker Compose if not present
            if ! command -v docker-compose &> /dev/null
            then
              sudo curl -SL "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi
            docker-compose --version
            docker-compose pull
            docker-compose build --no-cache
            docker-compose up -d --remove-orphans
            docker-compose exec -T app composer install --no-interaction --prefer-dist --optimize-autoloader
            # Fix permissions for Laravel
            docker-compose exec -T app chown -R www-data:www-data /var/www/storage /var/www/bootstrap/cache
            docker-compose exec -T app chmod -R 775 /var/www/storage /var/www/bootstrap/cache
            docker-compose exec -T app php artisan migrate --force --seed
            docker-compose exec -T app php artisan config:cache
            docker-compose exec -T app php artisan route:cache
            docker-compose exec -T app php artisan view:cache
          EOF

      - name: Fix Laravel permissions after deploy
        run: |
          ssh -i ~/.ssh/id_rsa ${{ vars.EC2_USER }}@${{ vars.EC2_HOST }} << 'EOF'
            cd /home/${{ vars.EC2_USER }}/app
            docker-compose exec -T app chown -R www-data:www-data /var/www/storage /var/www/bootstrap/cache
            docker-compose exec -T app chmod -R 775 /var/www/storage /var/www/bootstrap/cache
            docker-compose exec app php artisan migrate:fresh --seed
          EOF
